
On-demand Traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000722  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000722  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000121b  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000914  00000000  00000000  00001b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ada  00000000  00000000  00002427  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fc  00000000  00000000  0000312c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000519  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 93 01 	call	0x326	; 0x326 <main>
  74:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:


void APP_init()
{
	//Initialization of button in port D pin 2 as an input
	BUTTON_init(PORT_D,2);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	84 e4       	ldi	r24, 0x44	; 68
  80:	0e 94 79 01 	call	0x2f2	; 0x2f2 <BUTTON_init>
	
	//Initialization of cars & Pedestrian LEDs
	LED_init(PORT_A,0);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 84 01 	call	0x308	; 0x308 <LED_init>
	LED_init(PORT_A,1);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 84 01 	call	0x308	; 0x308 <LED_init>
	LED_init(PORT_A,2);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 84 01 	call	0x308	; 0x308 <LED_init>
	LED_init(PORT_B,0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 84 01 	call	0x308	; 0x308 <LED_init>
	LED_init(PORT_B,1);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 84 01 	call	0x308	; 0x308 <LED_init>
	LED_init(PORT_B,2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	0e 94 84 01 	call	0x308	; 0x308 <LED_init>
	
	//Timer0 initialization
	void TIMER0_initMode();
	
	//Interrupts setup
	sei();
  b4:	78 94       	sei
	RISING_EDGE();
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	83 60       	ori	r24, 0x03	; 3
  ba:	85 bf       	out	0x35, r24	; 53
	ENABLE_EXT_INTERRUPTS();
  bc:	8b b7       	in	r24, 0x3b	; 59
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	8b bf       	out	0x3b, r24	; 59
	
	//Starting in normal mode
	mode=0;
  c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	08 95       	ret

000000c8 <APP_start>:
{
	uint8_t i;
	while(1)
	{
		
		if (mode == 0)
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	81 11       	cpse	r24, r1
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <APP_start+0x10>
			normalMode0();
  d0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <normalMode0>
	//Starting in normal mode
	mode=0;
}

void APP_start()
{
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	10 c0       	rjmp	.+32     	; 0xf8 <APP_start+0x30>
	{
		
		if (mode == 0)
			normalMode0();
		else
			pedestrianMode();
  d8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <pedestrianMode>
  dc:	fb cf       	rjmp	.-10     	; 0xd4 <APP_start+0xc>
			
		for (i=0;i<5;i++) //Delay 5 sec
		{
			TIMER0_delay();
  de:	0e 94 3c 03 	call	0x678	; 0x678 <TIMER0_delay>
			
			if(mode == 1 && ! BUTTON_read(PORT_D,2) ) //Pedestrian button is pressed
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	31 f4       	brne	.+12     	; 0xf6 <APP_start+0x2e>
  ea:	62 e0       	ldi	r22, 0x02	; 2
  ec:	84 e4       	ldi	r24, 0x44	; 68
  ee:	0e 94 7d 01 	call	0x2fa	; 0x2fa <BUTTON_read>
  f2:	88 23       	and	r24, r24
  f4:	19 f0       	breq	.+6      	; 0xfc <APP_start+0x34>
		if (mode == 0)
			normalMode0();
		else
			pedestrianMode();
			
		for (i=0;i<5;i++) //Delay 5 sec
  f6:	cf 5f       	subi	r28, 0xFF	; 255
  f8:	c5 30       	cpi	r28, 0x05	; 5
  fa:	88 f3       	brcs	.-30     	; 0xde <APP_start+0x16>
			if(mode == 1 && ! BUTTON_read(PORT_D,2) ) //Pedestrian button is pressed
				break;
		}
		
		///////////////////YELLOW BLINKING///////////////////
		if(mode == 0)
  fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 100:	88 23       	and	r24, r24
 102:	89 f0       	breq	.+34     	; 0x126 <APP_start+0x5e>
 104:	13 c0       	rjmp	.+38     	; 0x12c <APP_start+0x64>
		{
			for (i=0;i<5;i++) //Delay 5 sec
			{
				yellowBlink0(); //only yellow LED for car is blinking
 106:	0e 94 2e 01 	call	0x25c	; 0x25c <yellowBlink0>
				TIMER0_delay();
 10a:	0e 94 3c 03 	call	0x678	; 0x678 <TIMER0_delay>
				
				if (mode == 1 && ! BUTTON_read(PORT_D,2) ) //Pedestrian button is pressed
 10e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	31 f4       	brne	.+12     	; 0x122 <APP_start+0x5a>
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	84 e4       	ldi	r24, 0x44	; 68
 11a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <BUTTON_read>
 11e:	88 23       	and	r24, r24
 120:	29 f0       	breq	.+10     	; 0x12c <APP_start+0x64>
		}
		
		///////////////////YELLOW BLINKING///////////////////
		if(mode == 0)
		{
			for (i=0;i<5;i++) //Delay 5 sec
 122:	cf 5f       	subi	r28, 0xFF	; 255
 124:	01 c0       	rjmp	.+2      	; 0x128 <APP_start+0x60>
 126:	c0 e0       	ldi	r28, 0x00	; 0
 128:	c5 30       	cpi	r28, 0x05	; 5
 12a:	68 f3       	brcs	.-38     	; 0x106 <APP_start+0x3e>
				if (mode == 1 && ! BUTTON_read(PORT_D,2) ) //Pedestrian button is pressed
					break;
			}
		}
		
		if (mode == 1 && ! BUTTON_read(PORT_D,2))
 12c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	e1 f4       	brne	.+56     	; 0x16c <APP_start+0xa4>
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	84 e4       	ldi	r24, 0x44	; 68
 138:	0e 94 7d 01 	call	0x2fa	; 0x2fa <BUTTON_read>
 13c:	81 11       	cpse	r24, r1
 13e:	16 c0       	rjmp	.+44     	; 0x16c <APP_start+0xa4>
		{
			LED_off(PORT_A,1); 	
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
			for (i=0;i<5;i++) //Delay 5 sec
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	05 c0       	rjmp	.+10     	; 0x156 <APP_start+0x8e>
			{
				yellowBlink1(); //Both yellow LEDs are blinking
 14c:	0e 94 47 01 	call	0x28e	; 0x28e <yellowBlink1>
				TIMER0_delay();
 150:	0e 94 3c 03 	call	0x678	; 0x678 <TIMER0_delay>
		}
		
		if (mode == 1 && ! BUTTON_read(PORT_D,2))
		{
			LED_off(PORT_A,1); 	
			for (i=0;i<5;i++) //Delay 5 sec
 154:	cf 5f       	subi	r28, 0xFF	; 255
 156:	c5 30       	cpi	r28, 0x05	; 5
 158:	c8 f3       	brcs	.-14     	; 0x14c <APP_start+0x84>
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	05 c0       	rjmp	.+10     	; 0x168 <APP_start+0xa0>
				TIMER0_delay();
			}
			
			for (i=0;i<5;i++) //Delay 5 sec
			{
				pedestrianMode();
 15e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <pedestrianMode>
				TIMER0_delay();
 162:	0e 94 3c 03 	call	0x678	; 0x678 <TIMER0_delay>
			{
				yellowBlink1(); //Both yellow LEDs are blinking
				TIMER0_delay();
			}
			
			for (i=0;i<5;i++) //Delay 5 sec
 166:	cf 5f       	subi	r28, 0xFF	; 255
 168:	c5 30       	cpi	r28, 0x05	; 5
 16a:	c8 f3       	brcs	.-14     	; 0x15e <APP_start+0x96>
				TIMER0_delay();
			}
		}
		
		
		if (mode == 0)
 16c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 170:	88 23       	and	r24, r24
 172:	39 f0       	breq	.+14     	; 0x182 <APP_start+0xba>
 174:	0a c0       	rjmp	.+20     	; 0x18a <APP_start+0xc2>
		{
			for (i=0;i<5;i++) //Delay 5 sec
			{
				normalMode1();
 176:	0e 94 15 01 	call	0x22a	; 0x22a <normalMode1>
				TIMER0_delay();
 17a:	0e 94 3c 03 	call	0x678	; 0x678 <TIMER0_delay>
		}
		
		
		if (mode == 0)
		{
			for (i=0;i<5;i++) //Delay 5 sec
 17e:	cf 5f       	subi	r28, 0xFF	; 255
 180:	01 c0       	rjmp	.+2      	; 0x184 <APP_start+0xbc>
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	b8 f3       	brcs	.-18     	; 0x176 <APP_start+0xae>
 188:	13 c0       	rjmp	.+38     	; 0x1b0 <APP_start+0xe8>
				normalMode1();
				TIMER0_delay();
			}
		}
		
		else if(! BUTTON_read(PORT_D,2))
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	84 e4       	ldi	r24, 0x44	; 68
 18e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <BUTTON_read>
 192:	81 11       	cpse	r24, r1
 194:	0d c0       	rjmp	.+26     	; 0x1b0 <APP_start+0xe8>
		{
			LED_off(PORT_A,1);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	81 e4       	ldi	r24, 0x41	; 65
 19a:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
			for (i=0;i<5;i++) //Delay 5 sec
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <APP_start+0xe4>
			{
				yellowBlink1();
 1a2:	0e 94 47 01 	call	0x28e	; 0x28e <yellowBlink1>
				TIMER0_delay();
 1a6:	0e 94 3c 03 	call	0x678	; 0x678 <TIMER0_delay>
		}
		
		else if(! BUTTON_read(PORT_D,2))
		{
			LED_off(PORT_A,1);
			for (i=0;i<5;i++) //Delay 5 sec
 1aa:	cf 5f       	subi	r28, 0xFF	; 255
 1ac:	c5 30       	cpi	r28, 0x05	; 5
 1ae:	c8 f3       	brcs	.-14     	; 0x1a2 <APP_start+0xda>
				yellowBlink1();
				TIMER0_delay();
			}
		}
		
		if(mode == 0)
 1b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b4:	88 23       	and	r24, r24
 1b6:	59 f0       	breq	.+22     	; 0x1ce <APP_start+0x106>
 1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <APP_start+0x10c>
		{
			for (i=0;i<5;i++) //Delay 5 sec
			{
				yellowBlink0(); //only yellow LED for car is blinking
 1ba:	0e 94 2e 01 	call	0x25c	; 0x25c <yellowBlink0>
				TIMER0_delay();
 1be:	0e 94 3c 03 	call	0x678	; 0x678 <TIMER0_delay>
			
				if (mode == 1 ) //Pedestrian button is pressed
 1c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	29 f0       	breq	.+10     	; 0x1d4 <APP_start+0x10c>
			}
		}
		
		if(mode == 0)
		{
			for (i=0;i<5;i++) //Delay 5 sec
 1ca:	cf 5f       	subi	r28, 0xFF	; 255
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <APP_start+0x108>
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	c5 30       	cpi	r28, 0x05	; 5
 1d2:	98 f3       	brcs	.-26     	; 0x1ba <APP_start+0xf2>
			
				if (mode == 1 ) //Pedestrian button is pressed
				break;
			}
		}
		mode=0;
 1d4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 1d8:	77 cf       	rjmp	.-274    	; 0xc8 <APP_start>

000001da <__vector_1>:
}

ISR(EXT_INT_0) //Pedestrian button is pressed
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
	mode=1; //Pedestrian mode is on
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <normalMode0>:
#include "modes.h"


void normalMode0()
{	
	LED_off(PORT_A,1); //Yellow LED for cars is off
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_A,2); //Red LED for cars is off
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_B,0); //Green LED for pedestrians is off
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	82 e4       	ldi	r24, 0x42	; 66
 20c:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_B,1); //Yellow LED for pedestrians is off
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	
	LED_on(PORT_A,0); //Green for cars
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	81 e4       	ldi	r24, 0x41	; 65
 21c:	0e 94 8c 01 	call	0x318	; 0x318 <LED_on>
	LED_on(PORT_B,2); //Red for pedestrians
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	82 e4       	ldi	r24, 0x42	; 66
 224:	0e 94 8c 01 	call	0x318	; 0x318 <LED_on>
 228:	08 95       	ret

0000022a <normalMode1>:
}

void normalMode1()
{
	LED_off(PORT_A,1); //Yellow LED for cars is off
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	81 e4       	ldi	r24, 0x41	; 65
 22e:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_A,0); //Green LED for cars is off
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	81 e4       	ldi	r24, 0x41	; 65
 236:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_B,0); //Green LED for pedestrians is off
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	82 e4       	ldi	r24, 0x42	; 66
 23e:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_B,1); //Yellow LED for pedestrians is off
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	82 e4       	ldi	r24, 0x42	; 66
 246:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	
	LED_on(PORT_A,2); //Red for cars
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	81 e4       	ldi	r24, 0x41	; 65
 24e:	0e 94 8c 01 	call	0x318	; 0x318 <LED_on>
	LED_on(PORT_B,2); //Red for pedestrians
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	82 e4       	ldi	r24, 0x42	; 66
 256:	0e 94 8c 01 	call	0x318	; 0x318 <LED_on>
 25a:	08 95       	ret

0000025c <yellowBlink0>:


void yellowBlink0()
{
	//All red & green LEDs are off 
	LED_off(PORT_A,0);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	81 e4       	ldi	r24, 0x41	; 65
 260:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_A,2);
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	81 e4       	ldi	r24, 0x41	; 65
 268:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_B,0);
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	82 e4       	ldi	r24, 0x42	; 66
 270:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_B,2);
 274:	62 e0       	ldi	r22, 0x02	; 2
 276:	82 e4       	ldi	r24, 0x42	; 66
 278:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	
	LED_on(PORT_B,2); //Red for pedestrians
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	82 e4       	ldi	r24, 0x42	; 66
 280:	0e 94 8c 01 	call	0x318	; 0x318 <LED_on>
	LED_toggle(PORT_A,1); //Yellow LED for cars is blinking
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	81 e4       	ldi	r24, 0x41	; 65
 288:	0e 94 90 01 	call	0x320	; 0x320 <LED_toggle>
 28c:	08 95       	ret

0000028e <yellowBlink1>:
}

void yellowBlink1()
{
	//All red & green LEDs are off
	LED_off(PORT_A,0);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_A,2);
 296:	62 e0       	ldi	r22, 0x02	; 2
 298:	81 e4       	ldi	r24, 0x41	; 65
 29a:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_B,0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	82 e4       	ldi	r24, 0x42	; 66
 2a2:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_B,2);
 2a6:	62 e0       	ldi	r22, 0x02	; 2
 2a8:	82 e4       	ldi	r24, 0x42	; 66
 2aa:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	
	LED_toggle(PORT_A,1); //Yellow LED for cars is blinking
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	81 e4       	ldi	r24, 0x41	; 65
 2b2:	0e 94 90 01 	call	0x320	; 0x320 <LED_toggle>
	LED_toggle(PORT_B,1); //Yellow LED for pedestrian is blinking
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	82 e4       	ldi	r24, 0x42	; 66
 2ba:	0e 94 90 01 	call	0x320	; 0x320 <LED_toggle>
 2be:	08 95       	ret

000002c0 <pedestrianMode>:
	
}

void pedestrianMode()
{
	LED_off(PORT_A,1); //Yellow LED for cars is off
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	81 e4       	ldi	r24, 0x41	; 65
 2c4:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_A,0); //Green LED for cars is off
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	81 e4       	ldi	r24, 0x41	; 65
 2cc:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_B,2); //Red LED for pedestrians is off
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	82 e4       	ldi	r24, 0x42	; 66
 2d4:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	LED_off(PORT_B,1); //Yellow LED for pedestrians is off
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	82 e4       	ldi	r24, 0x42	; 66
 2dc:	0e 94 88 01 	call	0x310	; 0x310 <LED_off>
	
	LED_on(PORT_B,0); //Green for pedestrians
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	82 e4       	ldi	r24, 0x42	; 66
 2e4:	0e 94 8c 01 	call	0x318	; 0x318 <LED_on>
	LED_on(PORT_A,2); //Red for cars
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	81 e4       	ldi	r24, 0x41	; 65
 2ec:	0e 94 8c 01 	call	0x318	; 0x318 <LED_on>
 2f0:	08 95       	ret

000002f2 <BUTTON_init>:

#include "button.h"

void BUTTON_init(uint8_t buttonPort , uint8_t buttonPinNumber) //Input device
{
	DIO_init(buttonPort,buttonPinNumber,IN);
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_init>
 2f8:	08 95       	ret

000002fa <BUTTON_read>:
}

uint8_t BUTTON_read(uint8_t buttonPort , uint8_t buttonPinNumber)
{
	uint8_t * buttonState = 0x00;
	DIO_read(buttonPort,buttonPinNumber,buttonState);
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	0e 94 8e 02 	call	0x51c	; 0x51c <DIO_read>
	return (*buttonState);
 302:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
 306:	08 95       	ret

00000308 <LED_init>:

#include "led.h"

void LED_init(uint8_t ledPort , uint8_t ledPinNumber) //Output device
{
	DIO_init(ledPort,ledPinNumber,OUT);
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_init>
 30e:	08 95       	ret

00000310 <LED_off>:
}

void LED_off(uint8_t ledPort , uint8_t ledPinNumber)
{
	DIO_write(ledPort,ledPinNumber,LOW);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	0e 94 14 02 	call	0x428	; 0x428 <DIO_write>
 316:	08 95       	ret

00000318 <LED_on>:
}

void LED_on(uint8_t ledPort , uint8_t ledPinNumber)
{
	DIO_write(ledPort,ledPinNumber,HIGH);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	0e 94 14 02 	call	0x428	; 0x428 <DIO_write>
 31e:	08 95       	ret

00000320 <LED_toggle>:
}
void LED_toggle(uint8_t ledPort , uint8_t ledPinNumber)
{
	DIO_toggle(ledPort,ledPinNumber);
 320:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <DIO_toggle>
 324:	08 95       	ret

00000326 <main>:
#include "APPLICATION/app.h"


int main(void)
{
    APP_init();
 326:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
    APP_start();
 32a:	0e 94 64 00 	call	0xc8	; 0xc8 <APP_start>
}
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	08 95       	ret

00000334 <DIO_init>:

#include "dio.h"

void DIO_init(uint8_t port , uint8_t pinNumber , uint8_t direction)
{
	switch (port)
 334:	82 34       	cpi	r24, 0x42	; 66
 336:	31 f1       	breq	.+76     	; 0x384 <DIO_init+0x50>
 338:	18 f4       	brcc	.+6      	; 0x340 <DIO_init+0xc>
 33a:	81 34       	cpi	r24, 0x41	; 65
 33c:	39 f0       	breq	.+14     	; 0x34c <DIO_init+0x18>
 33e:	08 95       	ret
 340:	83 34       	cpi	r24, 0x43	; 67
 342:	e1 f1       	breq	.+120    	; 0x3bc <DIO_init+0x88>
 344:	84 34       	cpi	r24, 0x44	; 68
 346:	09 f4       	brne	.+2      	; 0x34a <DIO_init+0x16>
 348:	54 c0       	rjmp	.+168    	; 0x3f2 <DIO_init+0xbe>
 34a:	08 95       	ret
	{
		/////////////PORT A/////////////
	case PORT_A:
	if (direction == IN)
 34c:	41 11       	cpse	r20, r1
 34e:	0c c0       	rjmp	.+24     	; 0x368 <DIO_init+0x34>
		CLR_BIT(DDRA,pinNumber);
 350:	2a b3       	in	r18, 0x1a	; 26
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_init+0x28>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_init+0x24>
 360:	80 95       	com	r24
 362:	82 23       	and	r24, r18
 364:	8a bb       	out	0x1a, r24	; 26
 366:	08 95       	ret
	else if (direction == OUT)
 368:	41 30       	cpi	r20, 0x01	; 1
 36a:	09 f0       	breq	.+2      	; 0x36e <DIO_init+0x3a>
 36c:	5c c0       	rjmp	.+184    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		SET_BIT(DDRA,pinNumber);
 36e:	2a b3       	in	r18, 0x1a	; 26
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_init+0x46>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_init+0x42>
 37e:	82 2b       	or	r24, r18
 380:	8a bb       	out	0x1a, r24	; 26
 382:	08 95       	ret
	break;
		
		/////////////PORT B/////////////
	case PORT_B:
	if (direction == IN)
 384:	41 11       	cpse	r20, r1
 386:	0c c0       	rjmp	.+24     	; 0x3a0 <DIO_init+0x6c>
		CLR_BIT(DDRB,pinNumber);
 388:	27 b3       	in	r18, 0x17	; 23
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_init+0x60>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_init+0x5c>
 398:	80 95       	com	r24
 39a:	82 23       	and	r24, r18
 39c:	87 bb       	out	0x17, r24	; 23
 39e:	08 95       	ret
	else if (direction == OUT)
 3a0:	41 30       	cpi	r20, 0x01	; 1
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <DIO_init+0x72>
 3a4:	40 c0       	rjmp	.+128    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		SET_BIT(DDRB,pinNumber);
 3a6:	27 b3       	in	r18, 0x17	; 23
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_init+0x7e>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_init+0x7a>
 3b6:	82 2b       	or	r24, r18
 3b8:	87 bb       	out	0x17, r24	; 23
 3ba:	08 95       	ret
	break;
		
		/////////////PORT C/////////////
	case PORT_C:
	if (direction == IN)
 3bc:	41 11       	cpse	r20, r1
 3be:	0c c0       	rjmp	.+24     	; 0x3d8 <DIO_init+0xa4>
		CLR_BIT(DDRC,pinNumber);
 3c0:	24 b3       	in	r18, 0x14	; 20
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_init+0x98>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_init+0x94>
 3d0:	80 95       	com	r24
 3d2:	82 23       	and	r24, r18
 3d4:	84 bb       	out	0x14, r24	; 20
 3d6:	08 95       	ret
	else if (direction == OUT)
 3d8:	41 30       	cpi	r20, 0x01	; 1
 3da:	29 f5       	brne	.+74     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		SET_BIT(DDRC,pinNumber);
 3dc:	24 b3       	in	r18, 0x14	; 20
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_init+0xb4>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_init+0xb0>
 3ec:	82 2b       	or	r24, r18
 3ee:	84 bb       	out	0x14, r24	; 20
 3f0:	08 95       	ret
	break;
	
		/////////////PORT D/////////////
	case PORT_D:
	if (direction == IN)
 3f2:	41 11       	cpse	r20, r1
 3f4:	0c c0       	rjmp	.+24     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		CLR_BIT(DDRD,pinNumber);
 3f6:	21 b3       	in	r18, 0x11	; 17
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_init+0xca>
 406:	80 95       	com	r24
 408:	82 23       	and	r24, r18
 40a:	81 bb       	out	0x11, r24	; 17
 40c:	08 95       	ret
	else if (direction == OUT)
 40e:	41 30       	cpi	r20, 0x01	; 1
 410:	51 f4       	brne	.+20     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		SET_BIT(DDRD,pinNumber);
 412:	21 b3       	in	r18, 0x11	; 17
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	82 2b       	or	r24, r18
 424:	81 bb       	out	0x11, r24	; 17
 426:	08 95       	ret

00000428 <DIO_write>:
	}
}

void DIO_write(uint8_t port , uint8_t pinNumber , uint8_t value)
{
	switch (port)
 428:	82 34       	cpi	r24, 0x42	; 66
 42a:	31 f1       	breq	.+76     	; 0x478 <DIO_write+0x50>
 42c:	18 f4       	brcc	.+6      	; 0x434 <DIO_write+0xc>
 42e:	81 34       	cpi	r24, 0x41	; 65
 430:	39 f0       	breq	.+14     	; 0x440 <DIO_write+0x18>
 432:	08 95       	ret
 434:	83 34       	cpi	r24, 0x43	; 67
 436:	e1 f1       	breq	.+120    	; 0x4b0 <DIO_write+0x88>
 438:	84 34       	cpi	r24, 0x44	; 68
 43a:	09 f4       	brne	.+2      	; 0x43e <DIO_write+0x16>
 43c:	54 c0       	rjmp	.+168    	; 0x4e6 <DIO_write+0xbe>
 43e:	08 95       	ret
	{
		/////////////PORT A/////////////
		case PORT_A:
		if (value == LOW)
 440:	41 11       	cpse	r20, r1
 442:	0c c0       	rjmp	.+24     	; 0x45c <DIO_write+0x34>
			CLR_BIT(PORTA,pinNumber);
 444:	2b b3       	in	r18, 0x1b	; 27
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_write+0x28>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_write+0x24>
 454:	80 95       	com	r24
 456:	82 23       	and	r24, r18
 458:	8b bb       	out	0x1b, r24	; 27
 45a:	08 95       	ret
		else if (value == HIGH)
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	09 f0       	breq	.+2      	; 0x462 <DIO_write+0x3a>
 460:	5c c0       	rjmp	.+184    	; 0x51a <DIO_write+0xf2>
			SET_BIT(PORTA,pinNumber);
 462:	2b b3       	in	r18, 0x1b	; 27
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_write+0x46>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_write+0x42>
 472:	82 2b       	or	r24, r18
 474:	8b bb       	out	0x1b, r24	; 27
 476:	08 95       	ret
		break;
		
		/////////////PORT B/////////////
		case PORT_B:
		if (value == LOW)
 478:	41 11       	cpse	r20, r1
 47a:	0c c0       	rjmp	.+24     	; 0x494 <DIO_write+0x6c>
			CLR_BIT(PORTB,pinNumber);
 47c:	28 b3       	in	r18, 0x18	; 24
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_write+0x60>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_write+0x5c>
 48c:	80 95       	com	r24
 48e:	82 23       	and	r24, r18
 490:	88 bb       	out	0x18, r24	; 24
 492:	08 95       	ret
		else if (value == HIGH)
 494:	41 30       	cpi	r20, 0x01	; 1
 496:	09 f0       	breq	.+2      	; 0x49a <DIO_write+0x72>
 498:	40 c0       	rjmp	.+128    	; 0x51a <DIO_write+0xf2>
			SET_BIT(PORTB,pinNumber);
 49a:	28 b3       	in	r18, 0x18	; 24
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_write+0x7e>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_write+0x7a>
 4aa:	82 2b       	or	r24, r18
 4ac:	88 bb       	out	0x18, r24	; 24
 4ae:	08 95       	ret
		break;
		
		/////////////PORT C/////////////
		case PORT_C:
		if (value == LOW)
 4b0:	41 11       	cpse	r20, r1
 4b2:	0c c0       	rjmp	.+24     	; 0x4cc <DIO_write+0xa4>
			CLR_BIT(PORTC,pinNumber);
 4b4:	25 b3       	in	r18, 0x15	; 21
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_write+0x98>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	6a 95       	dec	r22
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_write+0x94>
 4c4:	80 95       	com	r24
 4c6:	82 23       	and	r24, r18
 4c8:	85 bb       	out	0x15, r24	; 21
 4ca:	08 95       	ret
		else if (value == HIGH)
 4cc:	41 30       	cpi	r20, 0x01	; 1
 4ce:	29 f5       	brne	.+74     	; 0x51a <DIO_write+0xf2>
			SET_BIT(PORTC,pinNumber);
 4d0:	25 b3       	in	r18, 0x15	; 21
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_write+0xb4>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_write+0xb0>
 4e0:	82 2b       	or	r24, r18
 4e2:	85 bb       	out	0x15, r24	; 21
 4e4:	08 95       	ret
		break;
		
		/////////////PORT D/////////////
		case PORT_D:
		if (value == LOW)
 4e6:	41 11       	cpse	r20, r1
 4e8:	0c c0       	rjmp	.+24     	; 0x502 <DIO_write+0xda>
			CLR_BIT(PORTD,pinNumber);
 4ea:	22 b3       	in	r18, 0x12	; 18
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_write+0xce>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_write+0xca>
 4fa:	80 95       	com	r24
 4fc:	82 23       	and	r24, r18
 4fe:	82 bb       	out	0x12, r24	; 18
 500:	08 95       	ret
		else if (value == HIGH)
 502:	41 30       	cpi	r20, 0x01	; 1
 504:	51 f4       	brne	.+20     	; 0x51a <DIO_write+0xf2>
			SET_BIT(PORTD,pinNumber);
 506:	22 b3       	in	r18, 0x12	; 18
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_write+0xea>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_write+0xe6>
 516:	82 2b       	or	r24, r18
 518:	82 bb       	out	0x12, r24	; 18
 51a:	08 95       	ret

0000051c <DIO_read>:
	
}

void DIO_read(uint8_t port , uint8_t pinNumber , uint8_t * value)
{
	switch(port)
 51c:	82 34       	cpi	r24, 0x42	; 66
 51e:	01 f1       	breq	.+64     	; 0x560 <DIO_read+0x44>
 520:	18 f4       	brcc	.+6      	; 0x528 <DIO_read+0xc>
 522:	81 34       	cpi	r24, 0x41	; 65
 524:	39 f0       	breq	.+14     	; 0x534 <DIO_read+0x18>
 526:	08 95       	ret
 528:	83 34       	cpi	r24, 0x43	; 67
 52a:	81 f1       	breq	.+96     	; 0x58c <DIO_read+0x70>
 52c:	84 34       	cpi	r24, 0x44	; 68
 52e:	09 f4       	brne	.+2      	; 0x532 <DIO_read+0x16>
 530:	43 c0       	rjmp	.+134    	; 0x5b8 <DIO_read+0x9c>
 532:	08 95       	ret
	{
		/////////////PORT A/////////////
		case PORT_A:
		*value=READ_BIT(PINA,pinNumber);
 534:	79 b3       	in	r23, 0x19	; 25
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	9c 01       	movw	r18, r24
 53c:	06 2e       	mov	r0, r22
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_read+0x28>
 540:	22 0f       	add	r18, r18
 542:	33 1f       	adc	r19, r19
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_read+0x24>
 548:	87 2f       	mov	r24, r23
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	82 23       	and	r24, r18
 54e:	93 23       	and	r25, r19
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_read+0x3a>
 552:	95 95       	asr	r25
 554:	87 95       	ror	r24
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_read+0x36>
 55a:	fa 01       	movw	r30, r20
 55c:	80 83       	st	Z, r24
		break;
 55e:	08 95       	ret
		
		/////////////PORT B/////////////
		case PORT_B:
		*value=READ_BIT(PINB,pinNumber);
 560:	76 b3       	in	r23, 0x16	; 22
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	9c 01       	movw	r18, r24
 568:	06 2e       	mov	r0, r22
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_read+0x54>
 56c:	22 0f       	add	r18, r18
 56e:	33 1f       	adc	r19, r19
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_read+0x50>
 574:	87 2f       	mov	r24, r23
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	82 23       	and	r24, r18
 57a:	93 23       	and	r25, r19
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_read+0x66>
 57e:	95 95       	asr	r25
 580:	87 95       	ror	r24
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_read+0x62>
 586:	fa 01       	movw	r30, r20
 588:	80 83       	st	Z, r24
		break;
 58a:	08 95       	ret
		
		/////////////PORT C/////////////
		case PORT_C:
		*value=READ_BIT(PINC,pinNumber);
 58c:	73 b3       	in	r23, 0x13	; 19
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	9c 01       	movw	r18, r24
 594:	06 2e       	mov	r0, r22
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_read+0x80>
 598:	22 0f       	add	r18, r18
 59a:	33 1f       	adc	r19, r19
 59c:	0a 94       	dec	r0
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_read+0x7c>
 5a0:	87 2f       	mov	r24, r23
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	82 23       	and	r24, r18
 5a6:	93 23       	and	r25, r19
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_read+0x92>
 5aa:	95 95       	asr	r25
 5ac:	87 95       	ror	r24
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_read+0x8e>
 5b2:	fa 01       	movw	r30, r20
 5b4:	80 83       	st	Z, r24
		break;
 5b6:	08 95       	ret
		
		/////////////PORT D/////////////
		case PORT_D:
		*value=READ_BIT(PIND,pinNumber);
 5b8:	70 b3       	in	r23, 0x10	; 16
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	9c 01       	movw	r18, r24
 5c0:	06 2e       	mov	r0, r22
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_read+0xac>
 5c4:	22 0f       	add	r18, r18
 5c6:	33 1f       	adc	r19, r19
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_read+0xa8>
 5cc:	87 2f       	mov	r24, r23
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	82 23       	and	r24, r18
 5d2:	93 23       	and	r25, r19
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_read+0xbe>
 5d6:	95 95       	asr	r25
 5d8:	87 95       	ror	r24
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_read+0xba>
 5de:	fa 01       	movw	r30, r20
 5e0:	80 83       	st	Z, r24
 5e2:	08 95       	ret

000005e4 <DIO_toggle>:
	
}

void DIO_toggle(uint8_t port , uint8_t pinNumber)
{
	switch (port)
 5e4:	82 34       	cpi	r24, 0x42	; 66
 5e6:	a1 f0       	breq	.+40     	; 0x610 <DIO_toggle+0x2c>
 5e8:	18 f4       	brcc	.+6      	; 0x5f0 <DIO_toggle+0xc>
 5ea:	81 34       	cpi	r24, 0x41	; 65
 5ec:	31 f0       	breq	.+12     	; 0x5fa <DIO_toggle+0x16>
 5ee:	08 95       	ret
 5f0:	83 34       	cpi	r24, 0x43	; 67
 5f2:	c9 f0       	breq	.+50     	; 0x626 <DIO_toggle+0x42>
 5f4:	84 34       	cpi	r24, 0x44	; 68
 5f6:	11 f1       	breq	.+68     	; 0x63c <DIO_toggle+0x58>
 5f8:	08 95       	ret
	{
		/////////////PORT A/////////////
		case PORT_A:
		TOGGLE_BIT(PORTA,pinNumber);
 5fa:	2b b3       	in	r18, 0x1b	; 27
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_toggle+0x22>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_toggle+0x1e>
 60a:	82 27       	eor	r24, r18
 60c:	8b bb       	out	0x1b, r24	; 27
		break;
 60e:	08 95       	ret
		
		/////////////PORT B/////////////
		case PORT_B:
		TOGGLE_BIT(PORTB,pinNumber);
 610:	28 b3       	in	r18, 0x18	; 24
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_toggle+0x38>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_toggle+0x34>
 620:	82 27       	eor	r24, r18
 622:	88 bb       	out	0x18, r24	; 24
		break;
 624:	08 95       	ret
		
		/////////////PORT C/////////////
		case PORT_C:
		TOGGLE_BIT(PORTC,pinNumber);
 626:	25 b3       	in	r18, 0x15	; 21
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_toggle+0x4e>
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	6a 95       	dec	r22
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_toggle+0x4a>
 636:	82 27       	eor	r24, r18
 638:	85 bb       	out	0x15, r24	; 21
		break;
 63a:	08 95       	ret
		
		/////////////PORT D/////////////
		case PORT_D:
		TOGGLE_BIT(PORTD,pinNumber);
 63c:	22 b3       	in	r18, 0x12	; 18
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_toggle+0x64>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_toggle+0x60>
 64c:	82 27       	eor	r24, r18
 64e:	82 bb       	out	0x12, r24	; 18
 650:	08 95       	ret

00000652 <TIMER0_initValue>:
	TCNT0 = 0x00; //Initial value
}

void TIMER0_initValue(uint16_t value)
{
	TCNT0 = value; //Initial value
 652:	82 bf       	out	0x32, r24	; 50
 654:	08 95       	ret

00000656 <TIMER0_prescalar>:
}

void TIMER0_prescalar(uint8_t x)
{
	switch(x)
 656:	88 23       	and	r24, r24
 658:	19 f0       	breq	.+6      	; 0x660 <TIMER0_prescalar+0xa>
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	29 f0       	breq	.+10     	; 0x668 <TIMER0_prescalar+0x12>
 65e:	08 95       	ret
	{
		case 0 : // No prescaling
		SET_BIT(TCCR0,0); 
 660:	83 b7       	in	r24, 0x33	; 51
 662:	81 60       	ori	r24, 0x01	; 1
 664:	83 bf       	out	0x33, r24	; 51
		break;
 666:	08 95       	ret
		
		case 1 : // clk / 256
		SET_BIT(TCCR0,2);
 668:	83 b7       	in	r24, 0x33	; 51
 66a:	84 60       	ori	r24, 0x04	; 4
 66c:	83 bf       	out	0x33, r24	; 51
 66e:	08 95       	ret

00000670 <TIMER0_clrOverFlow>:
	TIMER0_STOP(void);
}

void TIMER0_clrOverFlow()
{
	SET_BIT(TIFR,0);
 670:	88 b7       	in	r24, 0x38	; 56
 672:	81 60       	ori	r24, 0x01	; 1
 674:	88 bf       	out	0x38, r24	; 56
 676:	08 95       	ret

00000678 <TIMER0_delay>:
	}
	
}

void TIMER0_delay() 
{
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
	
	//maxDelay = 2^8 * Ttick = 2^8 * (256(prescalar)/10^6)
	//noOfOverFlows = delay/maxDelay = 1 / 0.000256 =16
	uint32_t NUMBER_OF_OVERFLOWS=16; 
	uint32_t overflowCounter =0;
	TIMER0_prescalar(1);
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	0e 94 2b 03 	call	0x656	; 0x656 <TIMER0_prescalar>
	
	//initial value = 2^8 - ((delay / T tick)/noOfOverFlows) = 2^8 -((1/0.065536)/16) = 12
	TIMER0_initValue(12);
 682:	8c e0       	ldi	r24, 0x0C	; 12
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 29 03 	call	0x652	; 0x652 <TIMER0_initValue>
	//Function to generate delay of 1 sec
	
	//maxDelay = 2^8 * Ttick = 2^8 * (256(prescalar)/10^6)
	//noOfOverFlows = delay/maxDelay = 1 / 0.000256 =16
	uint32_t NUMBER_OF_OVERFLOWS=16; 
	uint32_t overflowCounter =0;
 68a:	c0 e0       	ldi	r28, 0x00	; 0
 68c:	d0 e0       	ldi	r29, 0x00	; 0
	TIMER0_prescalar(1);
	
	//initial value = 2^8 - ((delay / T tick)/noOfOverFlows) = 2^8 -((1/0.065536)/16) = 12
	TIMER0_initValue(12);
	
	while(overflowCounter < NUMBER_OF_OVERFLOWS)
 68e:	06 c0       	rjmp	.+12     	; 0x69c <TIMER0_delay+0x24>
	{
		while(READ_BIT(TIFR ,0) == 0);
 690:	08 b6       	in	r0, 0x38	; 56
 692:	00 fe       	sbrs	r0, 0
 694:	fd cf       	rjmp	.-6      	; 0x690 <TIMER0_delay+0x18>
		TIMER0_clrOverFlow(); //clearing overflow flag
 696:	0e 94 38 03 	call	0x670	; 0x670 <TIMER0_clrOverFlow>
		overflowCounter ++;
 69a:	21 96       	adiw	r28, 0x01	; 1
	TIMER0_prescalar(1);
	
	//initial value = 2^8 - ((delay / T tick)/noOfOverFlows) = 2^8 -((1/0.065536)/16) = 12
	TIMER0_initValue(12);
	
	while(overflowCounter < NUMBER_OF_OVERFLOWS)
 69c:	c0 31       	cpi	r28, 0x10	; 16
 69e:	d1 05       	cpc	r29, r1
 6a0:	b8 f3       	brcs	.-18     	; 0x690 <TIMER0_delay+0x18>
		while(READ_BIT(TIFR ,0) == 0);
		TIMER0_clrOverFlow(); //clearing overflow flag
		overflowCounter ++;
	}
	
	TIMER0_STOP(void);
 6a2:	13 be       	out	0x33, r1	; 51
}
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret

000006aa <_exit>:
 6aa:	f8 94       	cli

000006ac <__stop_program>:
 6ac:	ff cf       	rjmp	.-2      	; 0x6ac <__stop_program>
