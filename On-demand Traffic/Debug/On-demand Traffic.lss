
On-demand Traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000056a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001033  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cb  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094c  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  00002b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f3  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000357f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  74:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
uint8_t mode=0; // 0 for normal mode & 1 for pedestrian mode

void APP_init()
{
	//Initialization of button in port D pin 2 as an input
	BUTTON_init(PORT_D,2);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	84 e4       	ldi	r24, 0x44	; 68
  80:	0e 94 08 01 	call	0x210	; 0x210 <BUTTON_init>
	
	//Initialization of cars & Pedestrian LEDs
	LED_init(PORT_A,0);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 0c 01 	call	0x218	; 0x218 <LED_init>
	LED_init(PORT_A,1);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 0c 01 	call	0x218	; 0x218 <LED_init>
	LED_init(PORT_A,2);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 0c 01 	call	0x218	; 0x218 <LED_init>
	LED_init(PORT_B,0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 0c 01 	call	0x218	; 0x218 <LED_init>
	LED_init(PORT_B,1);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 0c 01 	call	0x218	; 0x218 <LED_init>
	LED_init(PORT_B,2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	0e 94 0c 01 	call	0x218	; 0x218 <LED_init>
	
	//Timer0 initialization
	void TIMER0_initMode();
	
	//Interrupts setup
	sei();
  b4:	78 94       	sei
	RISING_EDGE();
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	83 60       	ori	r24, 0x03	; 3
  ba:	85 bf       	out	0x35, r24	; 53
	ENABLE_EXT_INTERRUPTS();
  bc:	8b b7       	in	r24, 0x3b	; 59
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	8b bf       	out	0x3b, r24	; 59
	
	//Starting in normal mode
	mode=0;
  c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	08 95       	ret

000000c8 <APP_start>:
{
	uint8_t i;
	while(1)
	{
		
		if (mode == 0)
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	81 11       	cpse	r24, r1
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <APP_start+0x10>
			normalMode0();
  d0:	0e 94 a8 00 	call	0x150	; 0x150 <normalMode0>
	//Starting in normal mode
	mode=0;
}

void APP_start()
{
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	0a c0       	rjmp	.+20     	; 0xec <APP_start+0x24>
	{
		
		if (mode == 0)
			normalMode0();
		else
			pedestrianMode();
  d8:	0e 94 ef 00 	call	0x1de	; 0x1de <pedestrianMode>
  dc:	fb cf       	rjmp	.-10     	; 0xd4 <APP_start+0xc>
			
		for (i=0;i<5;i++) //Delay 5 sec
		{
			TIMER0_delay();
  de:	0e 94 60 02 	call	0x4c0	; 0x4c0 <TIMER0_delay>
			
			if(mode == 1) //Pedestrian button is pressed
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	19 f0       	breq	.+6      	; 0xf0 <APP_start+0x28>
		if (mode == 0)
			normalMode0();
		else
			pedestrianMode();
			
		for (i=0;i<5;i++) //Delay 5 sec
  ea:	cf 5f       	subi	r28, 0xFF	; 255
  ec:	c5 30       	cpi	r28, 0x05	; 5
  ee:	b8 f3       	brcs	.-18     	; 0xde <APP_start+0x16>
			if(mode == 1) //Pedestrian button is pressed
				break;
		}
		
		///////////////////YELLOW BLINKING///////////////////
		if(mode == 0)
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	88 23       	and	r24, r24
  f6:	59 f0       	breq	.+22     	; 0x10e <APP_start+0x46>
  f8:	0d c0       	rjmp	.+26     	; 0x114 <APP_start+0x4c>
		{
			for (i=0;i<5;i++) //Delay 5 sec
			{
				yellowBlink0();
  fa:	0e 94 c1 00 	call	0x182	; 0x182 <yellowBlink0>
				TIMER0_delay();
  fe:	0e 94 60 02 	call	0x4c0	; 0x4c0 <TIMER0_delay>
				
				if (mode == 1 ) //Pedestrian button is pressed
 102:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	29 f0       	breq	.+10     	; 0x114 <APP_start+0x4c>
		}
		
		///////////////////YELLOW BLINKING///////////////////
		if(mode == 0)
		{
			for (i=0;i<5;i++) //Delay 5 sec
 10a:	cf 5f       	subi	r28, 0xFF	; 255
 10c:	01 c0       	rjmp	.+2      	; 0x110 <APP_start+0x48>
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	c5 30       	cpi	r28, 0x05	; 5
 112:	98 f3       	brcs	.-26     	; 0xfa <APP_start+0x32>
				if (mode == 1 ) //Pedestrian button is pressed
					break;
			}
		}
		
		if (mode == 1)
 114:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	b1 f6       	brne	.-84     	; 0xc8 <APP_start>
 11c:	06 c0       	rjmp	.+12     	; 0x12a <APP_start+0x62>
		{
			for (i=0;i<5;i++) //Delay 5 sec
			{
				yellowBlink1();
 11e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <yellowBlink1>
				TIMER0_delay();
 122:	0e 94 60 02 	call	0x4c0	; 0x4c0 <TIMER0_delay>
			}
		}
		
		if (mode == 1)
		{
			for (i=0;i<5;i++) //Delay 5 sec
 126:	cf 5f       	subi	r28, 0xFF	; 255
 128:	01 c0       	rjmp	.+2      	; 0x12c <APP_start+0x64>
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	c5 30       	cpi	r28, 0x05	; 5
 12e:	b8 f3       	brcs	.-18     	; 0x11e <APP_start+0x56>
 130:	cb cf       	rjmp	.-106    	; 0xc8 <APP_start>

00000132 <__vector_1>:
		
	}
}

ISR(EXT_INT_0) //Pedestrian button is pressed
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
	mode=1; //Pedestrian mode is on
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <normalMode0>:

#include "modes.h"

void normalMode0()
{	
	LED_off(PORT_A,1); //Yellow LED for cars is off
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_A,2); //Red LED for cars is off
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	81 e4       	ldi	r24, 0x41	; 65
 15c:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_B,0); //Green LED for pedestrians is off
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	82 e4       	ldi	r24, 0x42	; 66
 164:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_B,1); //Yellow LED for pedestrians is off
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	82 e4       	ldi	r24, 0x42	; 66
 16c:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	
	LED_on(PORT_A,0); //Green for cars
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	81 e4       	ldi	r24, 0x41	; 65
 174:	0e 94 14 01 	call	0x228	; 0x228 <LED_on>
	LED_on(PORT_B,2); //Red for pedestrians
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	82 e4       	ldi	r24, 0x42	; 66
 17c:	0e 94 14 01 	call	0x228	; 0x228 <LED_on>
 180:	08 95       	ret

00000182 <yellowBlink0>:
}

void yellowBlink0()
{
	//All red & green LEDs are off
	LED_off(PORT_A,0);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	81 e4       	ldi	r24, 0x41	; 65
 186:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_A,2);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	81 e4       	ldi	r24, 0x41	; 65
 18e:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_B,0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_B,2);
 19a:	62 e0       	ldi	r22, 0x02	; 2
 19c:	82 e4       	ldi	r24, 0x42	; 66
 19e:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	
	LED_toggle(PORT_A,1); //Yellow LED for cars is blinking
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	0e 94 18 01 	call	0x230	; 0x230 <LED_toggle>
 1aa:	08 95       	ret

000001ac <yellowBlink1>:
}

void yellowBlink1()
{
	//All red & green LEDs are off
	LED_off(PORT_A,0);
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	81 e4       	ldi	r24, 0x41	; 65
 1b0:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_A,2);
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	81 e4       	ldi	r24, 0x41	; 65
 1b8:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_B,0);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	82 e4       	ldi	r24, 0x42	; 66
 1c0:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_B,2);
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	82 e4       	ldi	r24, 0x42	; 66
 1c8:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	
	LED_toggle(PORT_A,1); //Yellow LED for cars is blinking
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	81 e4       	ldi	r24, 0x41	; 65
 1d0:	0e 94 18 01 	call	0x230	; 0x230 <LED_toggle>
	LED_toggle(PORT_B,1); //Yellow LED for pedestrian is blinking
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	82 e4       	ldi	r24, 0x42	; 66
 1d8:	0e 94 18 01 	call	0x230	; 0x230 <LED_toggle>
 1dc:	08 95       	ret

000001de <pedestrianMode>:
	
}

void pedestrianMode()
{
	LED_off(PORT_A,1); //Yellow LED for cars is off
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	81 e4       	ldi	r24, 0x41	; 65
 1e2:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_A,0); //Green LED for cars is off
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	81 e4       	ldi	r24, 0x41	; 65
 1ea:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_B,2); //Red LED for pedestrians is off
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	82 e4       	ldi	r24, 0x42	; 66
 1f2:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	LED_off(PORT_B,1); //Yellow LED for pedestrians is off
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	82 e4       	ldi	r24, 0x42	; 66
 1fa:	0e 94 10 01 	call	0x220	; 0x220 <LED_off>
	
	LED_on(PORT_B,0); //Green for pedestrians
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	82 e4       	ldi	r24, 0x42	; 66
 202:	0e 94 14 01 	call	0x228	; 0x228 <LED_on>
	LED_on(PORT_A,2); //Red for cars
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	81 e4       	ldi	r24, 0x41	; 65
 20a:	0e 94 14 01 	call	0x228	; 0x228 <LED_on>
 20e:	08 95       	ret

00000210 <BUTTON_init>:

#include "button.h"

void BUTTON_init(uint8_t buttonPort , uint8_t buttonPinNumber) //Input device
{
	DIO_init(buttonPort,buttonPinNumber,IN);
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	0e 94 22 01 	call	0x244	; 0x244 <DIO_init>
 216:	08 95       	ret

00000218 <LED_init>:

#include "led.h"

void LED_init(uint8_t ledPort , uint8_t ledPinNumber) //Output device
{
	DIO_init(ledPort,ledPinNumber,OUT);
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	0e 94 22 01 	call	0x244	; 0x244 <DIO_init>
 21e:	08 95       	ret

00000220 <LED_off>:
}

void LED_off(uint8_t ledPort , uint8_t ledPinNumber)
{
	DIO_write(ledPort,ledPinNumber,LOW);
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	0e 94 9c 01 	call	0x338	; 0x338 <DIO_write>
 226:	08 95       	ret

00000228 <LED_on>:
}

void LED_on(uint8_t ledPort , uint8_t ledPinNumber)
{
	DIO_write(ledPort,ledPinNumber,HIGH);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	0e 94 9c 01 	call	0x338	; 0x338 <DIO_write>
 22e:	08 95       	ret

00000230 <LED_toggle>:
}
void LED_toggle(uint8_t ledPort , uint8_t ledPinNumber)
{
	DIO_toggle(ledPort,ledPinNumber);
 230:	0e 94 16 02 	call	0x42c	; 0x42c <DIO_toggle>
 234:	08 95       	ret

00000236 <main>:
#include "APPLICATION/app.h"


int main(void)
{
    APP_init();
 236:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
    APP_start();
 23a:	0e 94 64 00 	call	0xc8	; 0xc8 <APP_start>
}
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	08 95       	ret

00000244 <DIO_init>:
		*value=READ_BIT(PINC,pinNumber);
		break;
		
		/////////////PORT D/////////////
		case PORT_D:
		*value=READ_BIT(PIND,pinNumber);
 244:	82 34       	cpi	r24, 0x42	; 66
 246:	31 f1       	breq	.+76     	; 0x294 <DIO_init+0x50>
 248:	18 f4       	brcc	.+6      	; 0x250 <DIO_init+0xc>
 24a:	81 34       	cpi	r24, 0x41	; 65
 24c:	39 f0       	breq	.+14     	; 0x25c <DIO_init+0x18>
 24e:	08 95       	ret
 250:	83 34       	cpi	r24, 0x43	; 67
 252:	e1 f1       	breq	.+120    	; 0x2cc <DIO_init+0x88>
 254:	84 34       	cpi	r24, 0x44	; 68
 256:	09 f4       	brne	.+2      	; 0x25a <DIO_init+0x16>
 258:	54 c0       	rjmp	.+168    	; 0x302 <DIO_init+0xbe>
 25a:	08 95       	ret
 25c:	41 11       	cpse	r20, r1
 25e:	0c c0       	rjmp	.+24     	; 0x278 <DIO_init+0x34>
 260:	2a b3       	in	r18, 0x1a	; 26
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_init+0x28>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_init+0x24>
 270:	80 95       	com	r24
 272:	82 23       	and	r24, r18
 274:	8a bb       	out	0x1a, r24	; 26
 276:	08 95       	ret
 278:	41 30       	cpi	r20, 0x01	; 1
 27a:	09 f0       	breq	.+2      	; 0x27e <DIO_init+0x3a>
 27c:	5c c0       	rjmp	.+184    	; 0x336 <DIO_init+0xf2>
 27e:	2a b3       	in	r18, 0x1a	; 26
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_init+0x46>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_init+0x42>
 28e:	82 2b       	or	r24, r18
 290:	8a bb       	out	0x1a, r24	; 26
 292:	08 95       	ret
 294:	41 11       	cpse	r20, r1
 296:	0c c0       	rjmp	.+24     	; 0x2b0 <DIO_init+0x6c>
 298:	27 b3       	in	r18, 0x17	; 23
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_init+0x60>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_init+0x5c>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	87 bb       	out	0x17, r24	; 23
 2ae:	08 95       	ret
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <DIO_init+0x72>
 2b4:	40 c0       	rjmp	.+128    	; 0x336 <DIO_init+0xf2>
 2b6:	27 b3       	in	r18, 0x17	; 23
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_init+0x7e>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_init+0x7a>
 2c6:	82 2b       	or	r24, r18
 2c8:	87 bb       	out	0x17, r24	; 23
 2ca:	08 95       	ret
 2cc:	41 11       	cpse	r20, r1
 2ce:	0c c0       	rjmp	.+24     	; 0x2e8 <DIO_init+0xa4>
 2d0:	24 b3       	in	r18, 0x14	; 20
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_init+0x98>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_init+0x94>
 2e0:	80 95       	com	r24
 2e2:	82 23       	and	r24, r18
 2e4:	84 bb       	out	0x14, r24	; 20
 2e6:	08 95       	ret
 2e8:	41 30       	cpi	r20, 0x01	; 1
 2ea:	29 f5       	brne	.+74     	; 0x336 <DIO_init+0xf2>
 2ec:	24 b3       	in	r18, 0x14	; 20
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_init+0xb4>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_init+0xb0>
 2fc:	82 2b       	or	r24, r18
 2fe:	84 bb       	out	0x14, r24	; 20
 300:	08 95       	ret
 302:	41 11       	cpse	r20, r1
 304:	0c c0       	rjmp	.+24     	; 0x31e <DIO_init+0xda>
 306:	21 b3       	in	r18, 0x11	; 17
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_init+0xce>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_init+0xca>
 316:	80 95       	com	r24
 318:	82 23       	and	r24, r18
 31a:	81 bb       	out	0x11, r24	; 17
 31c:	08 95       	ret
 31e:	41 30       	cpi	r20, 0x01	; 1
 320:	51 f4       	brne	.+20     	; 0x336 <DIO_init+0xf2>
 322:	21 b3       	in	r18, 0x11	; 17
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_init+0xea>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_init+0xe6>
 332:	82 2b       	or	r24, r18
 334:	81 bb       	out	0x11, r24	; 17
 336:	08 95       	ret

00000338 <DIO_write>:
 338:	82 34       	cpi	r24, 0x42	; 66
 33a:	31 f1       	breq	.+76     	; 0x388 <DIO_write+0x50>
 33c:	18 f4       	brcc	.+6      	; 0x344 <DIO_write+0xc>
 33e:	81 34       	cpi	r24, 0x41	; 65
 340:	39 f0       	breq	.+14     	; 0x350 <DIO_write+0x18>
 342:	08 95       	ret
 344:	83 34       	cpi	r24, 0x43	; 67
 346:	e1 f1       	breq	.+120    	; 0x3c0 <DIO_write+0x88>
 348:	84 34       	cpi	r24, 0x44	; 68
 34a:	09 f4       	brne	.+2      	; 0x34e <DIO_write+0x16>
 34c:	54 c0       	rjmp	.+168    	; 0x3f6 <DIO_write+0xbe>
 34e:	08 95       	ret
 350:	41 11       	cpse	r20, r1
 352:	0c c0       	rjmp	.+24     	; 0x36c <DIO_write+0x34>
 354:	2b b3       	in	r18, 0x1b	; 27
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_write+0x28>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_write+0x24>
 364:	80 95       	com	r24
 366:	82 23       	and	r24, r18
 368:	8b bb       	out	0x1b, r24	; 27
 36a:	08 95       	ret
 36c:	41 30       	cpi	r20, 0x01	; 1
 36e:	09 f0       	breq	.+2      	; 0x372 <DIO_write+0x3a>
 370:	5c c0       	rjmp	.+184    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 372:	2b b3       	in	r18, 0x1b	; 27
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_write+0x46>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_write+0x42>
 382:	82 2b       	or	r24, r18
 384:	8b bb       	out	0x1b, r24	; 27
 386:	08 95       	ret
 388:	41 11       	cpse	r20, r1
 38a:	0c c0       	rjmp	.+24     	; 0x3a4 <DIO_write+0x6c>
 38c:	28 b3       	in	r18, 0x18	; 24
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_write+0x60>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_write+0x5c>
 39c:	80 95       	com	r24
 39e:	82 23       	and	r24, r18
 3a0:	88 bb       	out	0x18, r24	; 24
 3a2:	08 95       	ret
 3a4:	41 30       	cpi	r20, 0x01	; 1
 3a6:	09 f0       	breq	.+2      	; 0x3aa <DIO_write+0x72>
 3a8:	40 c0       	rjmp	.+128    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3aa:	28 b3       	in	r18, 0x18	; 24
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_write+0x7e>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_write+0x7a>
 3ba:	82 2b       	or	r24, r18
 3bc:	88 bb       	out	0x18, r24	; 24
 3be:	08 95       	ret
 3c0:	41 11       	cpse	r20, r1
 3c2:	0c c0       	rjmp	.+24     	; 0x3dc <DIO_write+0xa4>
 3c4:	25 b3       	in	r18, 0x15	; 21
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_write+0x98>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_write+0x94>
 3d4:	80 95       	com	r24
 3d6:	82 23       	and	r24, r18
 3d8:	85 bb       	out	0x15, r24	; 21
 3da:	08 95       	ret
 3dc:	41 30       	cpi	r20, 0x01	; 1
 3de:	29 f5       	brne	.+74     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3e0:	25 b3       	in	r18, 0x15	; 21
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_write+0xb4>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_write+0xb0>
 3f0:	82 2b       	or	r24, r18
 3f2:	85 bb       	out	0x15, r24	; 21
 3f4:	08 95       	ret
 3f6:	41 11       	cpse	r20, r1
 3f8:	0c c0       	rjmp	.+24     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3fa:	22 b3       	in	r18, 0x12	; 18
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	80 95       	com	r24
 40c:	82 23       	and	r24, r18
 40e:	82 bb       	out	0x12, r24	; 18
 410:	08 95       	ret
 412:	41 30       	cpi	r20, 0x01	; 1
 414:	51 f4       	brne	.+20     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 416:	22 b3       	in	r18, 0x12	; 18
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	82 2b       	or	r24, r18
 428:	82 bb       	out	0x12, r24	; 18
 42a:	08 95       	ret

0000042c <DIO_toggle>:
	
}

void DIO_toggle(uint8_t port , uint8_t pinNumber)
{
	switch (port)
 42c:	82 34       	cpi	r24, 0x42	; 66
 42e:	a1 f0       	breq	.+40     	; 0x458 <DIO_toggle+0x2c>
 430:	18 f4       	brcc	.+6      	; 0x438 <DIO_toggle+0xc>
 432:	81 34       	cpi	r24, 0x41	; 65
 434:	31 f0       	breq	.+12     	; 0x442 <DIO_toggle+0x16>
 436:	08 95       	ret
 438:	83 34       	cpi	r24, 0x43	; 67
 43a:	c9 f0       	breq	.+50     	; 0x46e <DIO_toggle+0x42>
 43c:	84 34       	cpi	r24, 0x44	; 68
 43e:	11 f1       	breq	.+68     	; 0x484 <DIO_toggle+0x58>
 440:	08 95       	ret
	{
		/////////////PORT A/////////////
		case PORT_A:
		TOGGLE_BIT(PORTA,pinNumber);
 442:	2b b3       	in	r18, 0x1b	; 27
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_toggle+0x22>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_toggle+0x1e>
 452:	82 27       	eor	r24, r18
 454:	8b bb       	out	0x1b, r24	; 27
		break;
 456:	08 95       	ret
		
		/////////////PORT B/////////////
		case PORT_B:
		TOGGLE_BIT(PORTB,pinNumber);
 458:	28 b3       	in	r18, 0x18	; 24
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_toggle+0x38>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_toggle+0x34>
 468:	82 27       	eor	r24, r18
 46a:	88 bb       	out	0x18, r24	; 24
		break;
 46c:	08 95       	ret
		
		/////////////PORT C/////////////
		case PORT_C:
		TOGGLE_BIT(PORTC,pinNumber);
 46e:	25 b3       	in	r18, 0x15	; 21
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_toggle+0x4e>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_toggle+0x4a>
 47e:	82 27       	eor	r24, r18
 480:	85 bb       	out	0x15, r24	; 21
		break;
 482:	08 95       	ret
		
		/////////////PORT D/////////////
		case PORT_D:
		TOGGLE_BIT(PORTD,pinNumber);
 484:	22 b3       	in	r18, 0x12	; 18
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_toggle+0x64>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_toggle+0x60>
 494:	82 27       	eor	r24, r18
 496:	82 bb       	out	0x12, r24	; 18
 498:	08 95       	ret

0000049a <TIMER0_initValue>:
	TCNT0 = 0x00; //Initial value
}

void TIMER0_initValue(uint16_t value)
{
	TCNT0 = value; //Initial value
 49a:	82 bf       	out	0x32, r24	; 50
 49c:	08 95       	ret

0000049e <TIMER0_prescalar>:
}

void TIMER0_prescalar(uint8_t x)
{
	switch(x)
 49e:	88 23       	and	r24, r24
 4a0:	19 f0       	breq	.+6      	; 0x4a8 <TIMER0_prescalar+0xa>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	29 f0       	breq	.+10     	; 0x4b0 <TIMER0_prescalar+0x12>
 4a6:	08 95       	ret
	{
		case 0 : // No prescaling
		SET_BIT(TCCR0,0); 
 4a8:	83 b7       	in	r24, 0x33	; 51
 4aa:	81 60       	ori	r24, 0x01	; 1
 4ac:	83 bf       	out	0x33, r24	; 51
		break;
 4ae:	08 95       	ret
		
		case 1 : // clk / 256
		SET_BIT(TCCR0,2);
 4b0:	83 b7       	in	r24, 0x33	; 51
 4b2:	84 60       	ori	r24, 0x04	; 4
 4b4:	83 bf       	out	0x33, r24	; 51
 4b6:	08 95       	ret

000004b8 <TIMER0_clrOverFlow>:
	TIMER0_STOP(void);
}

void TIMER0_clrOverFlow()
{
	SET_BIT(TIFR,0);
 4b8:	88 b7       	in	r24, 0x38	; 56
 4ba:	81 60       	ori	r24, 0x01	; 1
 4bc:	88 bf       	out	0x38, r24	; 56
 4be:	08 95       	ret

000004c0 <TIMER0_delay>:
	}
	
}

void TIMER0_delay() 
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
	
	//maxDelay = 2^8 * Ttick = 2^8 * (256(prescalar)/10^6)
	//noOfOverFlows = delay/maxDelay = 1 / 0.000256 =16
	uint32_t NUMBER_OF_OVERFLOWS=16; 
	uint32_t overflowCounter =0;
	TIMER0_prescalar(1);
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 4f 02 	call	0x49e	; 0x49e <TIMER0_prescalar>
	
	//initial value = 2^8 - ((delay / T tick)/noOfOverFlows) = 2^8 -((1/0.065536)/16) = 12
	TIMER0_initValue(12);
 4ca:	8c e0       	ldi	r24, 0x0C	; 12
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 4d 02 	call	0x49a	; 0x49a <TIMER0_initValue>
	//Function to generate delay of 1 sec
	
	//maxDelay = 2^8 * Ttick = 2^8 * (256(prescalar)/10^6)
	//noOfOverFlows = delay/maxDelay = 1 / 0.000256 =16
	uint32_t NUMBER_OF_OVERFLOWS=16; 
	uint32_t overflowCounter =0;
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
	TIMER0_prescalar(1);
	
	//initial value = 2^8 - ((delay / T tick)/noOfOverFlows) = 2^8 -((1/0.065536)/16) = 12
	TIMER0_initValue(12);
	
	while(overflowCounter < NUMBER_OF_OVERFLOWS)
 4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <TIMER0_delay+0x24>
	{
		while(READ_BIT(TIFR ,0) == 0);
 4d8:	08 b6       	in	r0, 0x38	; 56
 4da:	00 fe       	sbrs	r0, 0
 4dc:	fd cf       	rjmp	.-6      	; 0x4d8 <TIMER0_delay+0x18>
		TIMER0_clrOverFlow(); //clearing overflow flag
 4de:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <TIMER0_clrOverFlow>
		overflowCounter ++;
 4e2:	21 96       	adiw	r28, 0x01	; 1
	TIMER0_prescalar(1);
	
	//initial value = 2^8 - ((delay / T tick)/noOfOverFlows) = 2^8 -((1/0.065536)/16) = 12
	TIMER0_initValue(12);
	
	while(overflowCounter < NUMBER_OF_OVERFLOWS)
 4e4:	c0 31       	cpi	r28, 0x10	; 16
 4e6:	d1 05       	cpc	r29, r1
 4e8:	b8 f3       	brcs	.-18     	; 0x4d8 <TIMER0_delay+0x18>
		while(READ_BIT(TIFR ,0) == 0);
		TIMER0_clrOverFlow(); //clearing overflow flag
		overflowCounter ++;
	}
	
	TIMER0_STOP(void);
 4ea:	13 be       	out	0x33, r1	; 51
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>
